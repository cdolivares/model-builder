// Generated by CoffeeScript 1.4.0
(function() {
  var DBSETTINGS, Graph, GraphDirector, MongoBuilder, ObjectID, RELATION, Relational, SCHEMA, builder, graph, graphDirector;

  ObjectID = require("mongoose").Schema.Types.ObjectId;

  RELATION = {
    teachers: {
      type: "Actable",
      store: {
        type: "mongo",
        modelName: "Teacher"
      },
      ownedBy: "none",
      owns: "classes",
      permissions: {
        admin: "ALL",
        teacher: "SUPER",
        parent: "NONE",
        pstudent: "NONE"
      }
    },
    classes: {
      type: "Owner",
      store: {
        type: "mongo",
        modelName: "Class"
      },
      ownedBy: "teachers",
      owns: "students",
      root: true,
      permissions: {
        admin: "ALL",
        teacher: "R,RW,RWD,SUPER,REVOKED",
        parent: "DENY",
        pStudent: "DENY"
      }
    }
  };

  SCHEMA = {
    Teacher: {
      fields: {
        'psid': String,
        'partner_course_ids': [String],
        'pid': String,
        'school': {},
        'region': String,
        'email': {
          'type': String,
          'unique': true
        },
        'title': String,
        'first_name': String,
        'last_name': String,
        'tour': Boolean,
        'tstage': {
          'type': Number,
          'default': 0
        },
        'avatars': [ObjectID],
        'created': {
          'type': Date,
          'index': true,
          'default': Date.now
        },
        'access': {
          'type': Date,
          'index': true
        },
        'referred': [ObjectID],
        'trefer': {
          'type': Number,
          'default': 0
        },
        'srefer': {
          'type': Number,
          'default': 0
        },
        'features': [String],
        'credit': Number,
        'bitly': String,
        'tc': Boolean,
        'hits': Number,
        'pic': String,
        'onboard': [Number],
        'newpush': Boolean,
        'loc': [],
        'geo': [],
        'nstudents': Number,
        'nclasses': Number,
        'flags': {},
        'ab': {},
        'contact': Date,
        'ip': {},
        'unsub': Boolean,
        'awards': Number,
        'sso': String,
        'acl': {
          'type': Array,
          'sparse': true
        },
        'uid': ObjectID,
        'ios': Boolean,
        'networks': {},
        'school_meta': {},
        'class_order': [String]
      },
      typed: {
        'psid': "String",
        'partner_course_ids': "String",
        'pid': "String",
        'school': {},
        'region': "String",
        'email': "String",
        'title': "String",
        'first_name': "String",
        'last_name': "String",
        'tour': "Boolean",
        'tstage': "Number",
        'avatars': "ObjectId",
        'created': "Date",
        'access': "Date",
        'referred': "ObjectId",
        'trefer': "Number",
        'srefer': "Number",
        'features': "String",
        'credit': "Number",
        'bitly': "String",
        'tc': "Boolean",
        'hits': "Number",
        'pic': "String",
        'onboard': "Number",
        'newpush': "Boolean",
        'loc': "Array",
        'geo': "Array",
        'nstudents': "Number",
        'nclasses': "Number",
        'flags': {},
        'ab': {},
        'contact': "Date",
        'ip': {},
        'unsub': "Boolean",
        'awards': "Number",
        'sso': "String",
        'acl': "Array",
        'uid': "ObjectId",
        'ios': "Boolean",
        'networks': {},
        'school_meta': {},
        'class_order': "String"
      }
    },
    Class: {
      fields: {
        'school': ObjectID,
        'teacher': {
          'type': ObjectID,
          'ref': 'Teacher'
        },
        'year': Number,
        'subject': String,
        'name': String,
        'icon': String,
        'shortcode': String,
        'teams': [String],
        'points': [Number],
        'b': {
          'p': [ObjectID],
          'n': [ObjectID]
        },
        'demo': Boolean,
        'prefs': {
          'type': ObjectID,
          'ref': 'ClassSetting'
        },
        'nstudents': Number,
        'class_code': String,
        'archived': Boolean,
        'acl': {
          'type': Array,
          'sparse': true
        },
        'pid': String,
        'psid': String
      },
      typed: {
        'school': "ObjectId",
        'teacher': "ObjectId",
        'year': "Number",
        'subject': "String",
        'name': "String",
        'icon': "String",
        'shortcode': "String",
        'teams': "String",
        'points': "Number",
        'b': {
          'p': "ObjectId",
          'n': "ObjectId"
        },
        'demo': "Boolean",
        'prefs': "ObjectId",
        'nstudents': "Number",
        'class_code': "String",
        'archived': "Boolean",
        'acl': "Array",
        'pid': "String",
        'psid': "String"
      }
    }
  };

  DBSETTINGS = {
    env: "development",
    databases: {
      "default": {
        name: "dojo-dev",
        host: ["127.0.0.1"],
        port: "27017"
      },
      stats: {
        name: "dojo-testing-stats",
        host: ["127.0.0.1"],
        port: "27017"
      },
      partner: {
        name: "dojo-dev-partner",
        host: ["127.0.0.1"],
        port: "27017"
      },
      awardrecords: {
        name: "dojo-dev-awards",
        host: ["127.0.0.1"],
        port: "27017"
      }
    }
  };

  MongoBuilder = require("" + __dirname + "/dev/core/graph/builders/mongo");

  GraphDirector = require("" + __dirname + "/core/graph/director");

  Graph = require("" + __dirname + "/core/graph/graph");

  Relational = require("" + __dirname + "/dev/core/graph/builders/helpers/relational/mongo_relational");

  builder = new MongoBuilder(RELATION, SCHEMA, DBSETTINGS);

  graph = new Graph();

  graphDirector = new GraphDirector(graph, builder);

  builder.onRelational(function(relations, schemas, callback) {
    /*
        control passed back here. creates nodes...and should register with
        graph.
    */

    var relational;
    console.log("Got control back!");
    relational = new Relational(schemas);
    relational.addRelationship("teachers", "classes", "parent_child");
    console.log("added relationship");
    return callback(null);
  });

  graphDirector.build(function(err) {
    var models;
    models = builder.getResult();
    return models.Teacher.find(function(err, teachers) {
      var t;
      t = teachers[0];
      return t.classes();
    });
  });

}).call(this);

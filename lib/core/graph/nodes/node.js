// Generated by CoffeeScript 1.4.0

/*
  Class: Node

  Encapsulates
*/


(function() {
  var Node;

  Node = (function() {

    function Node(name, config) {
      this._name = name;
      this._config = config;
      this._edges = {};
      this._edges.parents = [];
      this._edges.children = [];
    }

    Node.prototype.addParentEdge = function(edge) {
      return this._edges.parents.push(edge);
    };

    Node.prototype.addChildEdge = function(edge) {
      return this._edges.children.push(edge);
    };

    Node.prototype.config = function() {
      return console.log("Configuring node..." + this._name);
    };

    /*
        Getters
    */


    Node.prototype.__defineGetter__('name', function() {
      return this._name;
    });

    Node.prototype.__defineGetter__('type', function() {
      return this._config.type;
    });

    Node.prototype.__defineGetter__('schema', function() {
      return this._config.driver.schema;
    });

    Node.prototype.__defineGetter__('isRoot', function() {
      return this._config.meta.root;
    });

    Node.prototype.__defineGetter__('short_name', function() {
      return this._config.meta.short_name;
    });

    /*
        .children and .parents return an object
        with
          {
            many: [array of many relationship node names],
            one:  [array of one relationship node names]
          }
        if this node has neither many or one relationships
        then NULL is returned.
    */


    Node.prototype.__defineGetter__('children', function() {
      if (!(this._config.children.one != null) && !(this._config.children.many != null)) {
        return null;
      } else {
        return _.map(this._edges.children, function(edge) {
          return edge.children;
        });
      }
    });

    Node.prototype.__defineGetter__('parents', function() {
      if (!(this._config.parents.one != null) && !(this._config.parents.many != null)) {
        return null;
      } else {
        return _.map(this._edges.parent, function(edge) {
          return edge.parent;
        });
      }
    });

    return Node;

  })();

  module.exports = Node;

}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
  var Base, _;

  _ = require("underscore");

  Base = (function() {
    function Base() {}

    Base.clone = function() {
      var f;

      f = function() {};
      f._r = {};
      f._r.has = {};
      f._r.has.many = [];
      f._r.has.one = [];
      f._r.belongs_to = {};
      f._r.belongs_to.many = [];
      f._r.belongs_to.one = [];
      f._s = {};
      f._short = null;
      f._root = false;
      f._instance_methods = {};
      f._virtuals = {};
      f.name = function(name) {
        return f._name = name;
      };
      f.has_many = function(Model) {
        return f._r.has.many.push(Model);
      };
      f.has_one = function(Model) {
        return f._r.has.one.push(Model);
      };
      f.belongs_to_many = function(Model) {
        return f._r.belongs_to.many.push(Model);
      };
      f.belongs_to_one = function(Model) {
        return f._r.belongs_to.one.push(Model);
      };
      f.type = function(type) {
        return f._type = type;
      };
      f.schema = function(obj) {
        return f._s = obj;
      };
      f.root = function(isRoot) {
        return f._root = isRoot;
      };
      f.short_name = function(n) {
        return f._short = n;
      };
      f.instance_methods = function(methods) {
        return f._instance_methods = methods;
      };
      f.virtuals = function(virtuals) {
        return f._virtuals = virtuals;
      };
      f.attach = function(attachments) {
        return f._attach = attachments;
      };
      f.featureFlags = function(featureFlags) {
        return f._featureFlags = _.filter(featureFlags.split(','), function(e) {
          return e.trim();
        });
      };
      /*
        Method: serialize
      
        Serializes the node into a json object.
        The format is something that an object
        of class type Node knows how to configure
        itself from.
      */

      f.serialize = function() {
        var o;

        o = {
          type: f._type,
          children: {
            many: f._r.has.many,
            one: f._r.has.one
          },
          parents: {
            many: f._r.belongs_to.many,
            one: f._r.belongs_to.one
          },
          meta: {
            root: f._root,
            short_name: f._short
          },
          driver: {
            schema: f._s.driverFields
          },
          methods: {
            instance: f._instance_methods
          },
          virtuals: f._virtuals,
          attach: f._attach,
          featureFlags: f._featureFlags
        };
        return o;
      };
      f.deserialize = function(obj) {
        throw new Error("Not Implemented");
      };
      f._get_r = function() {
        return f._r;
      };
      f._get_s = function() {
        return f._s;
      };
      f._get_name = function() {
        return f._name;
      };
      return f;
    };

    return Base;

  })();

  module.exports = Base;

}).call(this);
